import React, { useState } from 'react';
import axios from 'axios';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
  faUpload, 
  faBook, 
  faTag, 
  faDollarSign, 
  faImage, 
  faVideo,
  faFileAlt,
  faCheck,
  faSpinner
} from '@fortawesome/free-solid-svg-icons';

const CourseCreation = () => {
  const [isUploading, setIsUploading] = useState(false);
  const [transcriptGenerating, setTranscriptGenerating] = useState(false);
  const [courseData, setCourseData] = useState({
    title: '',
    description: '',
    thumbnail: null,
    thumbnailPreview: '',
    price: 0,
    category: '',
    tags: [],
    isPublished: false,
    videos: []
  });

  const [currentTag, setCurrentTag] = useState('');
  
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCourseData({
      ...courseData,
      [name]: value
    });
  };

  const handleThumbnailChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setCourseData({
        ...courseData,
        thumbnail: file,
        thumbnailPreview: URL.createObjectURL(file)
      });
    }
  };

  const handleVideoUpload = async (e) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;
    
    setIsUploading(true);
    
    // Create temporary video objects with local preview URLs
    const newVideos = Array.from(files).map(file => ({
      file,
      name: file.name,
      previewUrl: URL.createObjectURL(file),
      uploaded: false,
      transcript: null,
      transcriptGenerating: false
    }));
    
    setCourseData({
      ...courseData,
      videos: [...courseData.videos, ...newVideos]
    });
    
    // Simulate upload completion (in a real app, you would actually upload the files)
    setTimeout(() => {
      setCourseData(prevData => ({
        ...prevData,
        videos: prevData.videos.map((video, idx) => {
          if (!video.uploaded && idx >= prevData.videos.length - newVideos.length) {
            return { ...video, uploaded: true };
          }
          return video;
        })
      }));
      setIsUploading(false);
      
      // Generate AI transcripts for each new video
      generateTranscripts(courseData.videos.length - newVideos.length, newVideos.length);
    }, 2000);
  };
  
  const generateTranscripts = (startIndex, count) => {
    setTranscriptGenerating(true);
    
    // Simulate AI transcript generation
    const processVideos = [...courseData.videos];
    
    for (let i = startIndex; i < startIndex + count; i++) {
      // Mark that transcript generation is in progress
      processVideos[i] = { ...processVideos[i], transcriptGenerating: true };
    }
    
    setCourseData({ ...courseData, videos: processVideos });
    
    // Simulate transcript generation completion (in a real app, this would be an API call)
    setTimeout(() => {
      setCourseData(prevData => ({
        ...prevData,
        videos: prevData.videos.map((video, idx) => {
          if (idx >= startIndex && idx < startIndex + count) {
            return { 
              ...video, 
              transcriptGenerating: false,
              transcript: `AI-generated transcript for ${video.name}. This is an example transcript that would normally be generated by processing the audio from the video file using a speech-to-text service.`
            };
          }
          return video;
        })
      }));
      setTranscriptGenerating(false);
    }, 3000);
  };
  
  const removeVideo = (index) => {
    const updatedVideos = [...courseData.videos];
    updatedVideos.splice(index, 1);
    setCourseData({
      ...courseData,
      videos: updatedVideos
    });
  };

  const handleAddTag = () => {
    if (currentTag.trim() && !courseData.tags.includes(currentTag.trim())) {
      setCourseData({
        ...courseData,
        tags: [...courseData.tags, currentTag.trim()]
      });
      setCurrentTag('');
    }
  };

  const removeTag = (tagToRemove) => {
    setCourseData({
      ...courseData,
      tags: courseData.tags.filter(tag => tag !== tagToRemove)
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      // In a real application, you would upload the videos and get their URLs first
      // Then include those URLs in the course data
      
      const formData = new FormData();
      formData.append('title', courseData.title);
      formData.append('description', courseData.description);
      formData.append('price', courseData.price);
      formData.append('category', courseData.category);
      formData.append('isPublished', courseData.isPublished);
      formData.append('tags', JSON.stringify(courseData.tags));
      
      if (courseData.thumbnail) {
        formData.append('thumbnail', courseData.thumbnail);
      }
      
      // In a real implementation, you'd include video information
      // formData.append('videos', JSON.stringify(processedVideoData));
      
      const response = await axios.post('http://localhost:3000/course', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      
      if (response.data.success) {
        alert('Course created successfully!');
        // Reset form or redirect
      }
    } catch (error) {
      console.error('Error creating course:', error);
      alert('Failed to create course. Please try again.');
    }
  };

  return (
    <div className="flex">
      {/* Main content - 80% width */}
      <div className="w-4/5 p-6 bg-white">
        <h1 className="text-2xl font-bold mb-6">Create New Course</h1>
        
        <form onSubmit={handleSubmit}>
          {/* Course Title */}
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              <FontAwesomeIcon icon={faBook} className="mr-2" />
              Course Title
            </label>
            <input
              type="text"
              name="title"
              value={courseData.title}
              onChange={handleInputChange}
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              required
            />
          </div>
          
          {/* Course Description */}
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              <FontAwesomeIcon icon={faFileAlt} className="mr-2" />
              Description
            </label>
            <textarea
              name="description"
              value={courseData.description}
              onChange={handleInputChange}
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline h-32"
              required
            />
          </div>
          
          {/* Thumbnail Upload */}
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              <FontAwesomeIcon icon={faImage} className="mr-2" />
              Thumbnail
            </label>
            <div className="flex items-center">
              <input
                type="file"
                accept="image/*"
                onChange={handleThumbnailChange}
                className="hidden"
                id="thumbnail-upload"
              />
              <label 
                htmlFor="thumbnail-upload"
                className="cursor-pointer bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline flex items-center"
              >
                <FontAwesomeIcon icon={faUpload} className="mr-2" />
                Upload Thumbnail
              </label>
              {courseData.thumbnailPreview && (
                <div className="ml-4">
                  <img 
                    src={courseData.thumbnailPreview} 
                    alt="Thumbnail preview" 
                    className="h-16 w-auto object-cover rounded" 
                  />
                </div>
              )}
            </div>
          </div>
          
          {/* Video Upload */}
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              <FontAwesomeIcon icon={faVideo} className="mr-2" />
              Course Videos
            </label>
            <div className="flex items-center">
              <input
                type="file"
                accept="video/*"
                onChange={handleVideoUpload}
                className="hidden"
                id="video-upload"
                multiple
              />
              <label 
                htmlFor="video-upload"
                className="cursor-pointer bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline flex items-center"
              >
                <FontAwesomeIcon icon={faUpload} className="mr-2" />
                Upload Videos
              </label>
              {isUploading && (
                <div className="ml-4 text-blue-500 flex items-center">
                  <FontAwesomeIcon icon={faSpinner} spin className="mr-2" />
                  Uploading...
                </div>
              )}
            </div>
            
            {/* Video List */}
            {courseData.videos.length > 0 && (
              <div className="mt-4">
                <h3 className="font-semibold mb-2">Videos:</h3>
                <div className="space-y-4">
                  {courseData.videos.map((video, index) => (
                    <div key={index} className="border rounded p-4">
                      <div className="flex justify-between items-center">
                        <div className="flex items-center">
                          <FontAwesomeIcon icon={faVideo} className="mr-2 text-blue-500" />
                          <span>{video.name}</span>
                        </div>
                        <button 
                          type="button"
                          onClick={() => removeVideo(index)}
                          className="text-red-500 hover:text-red-700"
                        >
                          Remove
                        </button>
                      </div>
                      
                      <div className="mt-2">
                        {video.uploaded ? (
                          <span className="text-green-500 flex items-center">
                            <FontAwesomeIcon icon={faCheck} className="mr-1" /> Uploaded
                          </span>
                        ) : (
                          <span className="text-yellow-500">Uploading...</span>
                        )}
                      </div>
                      
                      <div className="mt-2">
                        {video.transcript ? (
                          <div>
                            <p className="font-semibold">AI Transcript:</p>
                            <div className="bg-gray-100 p-2 rounded mt-1 text-sm max-h-24 overflow-y-auto">
                              {video.transcript}
                            </div>
                          </div>
                        ) : video.transcriptGenerating ? (
                          <div className="text-blue-500 flex items-center">
                            <FontAwesomeIcon icon={faSpinner} spin className="mr-2" />
                            Generating transcript...
                          </div>
                        ) : (
                          <div className="text-gray-500">Transcript will be generated after upload</div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
          
          {/* Categories */}
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              <FontAwesomeIcon icon={faTag} className="mr-2" />
              Category
            </label>
            <select
              name="category"
              value={courseData.category}
              onChange={handleInputChange}
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              required
            >
              <option value="">Select a category</option>
              <option value="programming">Programming</option>
              <option value="design">Design</option>
              <option value="business">Business</option>
              <option value="marketing">Marketing</option>
              <option value="personal-development">Personal Development</option>
              <option value="other">Other</option>
            </select>
          </div>
          
          {/* Tags */}
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              <FontAwesomeIcon icon={faTag} className="mr-2" />
              Tags
            </label>
            <div className="flex">
              <input
                type="text"
                value={currentTag}
                onChange={(e) => setCurrentTag(e.target.value)}
                className="shadow appearance-none border rounded-l w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Add a tag"
              />
              <button
                type="button"
                onClick={handleAddTag}
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-r focus:outline-none focus:shadow-outline"
              >
                Add
              </button>
            </div>
            
            {courseData.tags.length > 0 && (
              <div className="mt-2 flex flex-wrap gap-2">
                {courseData.tags.map((tag, index) => (
                  <div key={index} className="bg-blue-100 text-blue-800 px-2 py-1 rounded flex items-center">
                    {tag}
                    <button
                      type="button"
                      onClick={() => removeTag(tag)}
                      className="ml-2 text-blue-500 hover:text-blue-700"
                    >
                      &times;
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>
          
          {/* Price */}
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              <FontAwesomeIcon icon={faDollarSign} className="mr-2" />
              Price (USD)
            </label>
            <input
              type="number"
              name="price"
              value={courseData.price}
              onChange={handleInputChange}
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              min="0"
              step="0.01"
            />
          </div>
          
          {/* Publish Toggle */}
          <div className="mb-6">
            <label className="flex items-center">
              <input
                type="checkbox"
                name="isPublished"
                checked={courseData.isPublished}
                onChange={(e) => setCourseData({...courseData, isPublished: e.target.checked})}
                className="mr-2"
              />
              <span className="text-gray-700">Publish course immediately</span>
            </label>
          </div>
          
          {/* Submit Button */}
          <div className="flex items-center justify-between">
            <button
              type="submit"
              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            >
              Create Course
            </button>
          </div>
        </form>
      </div>
      
      {/* Sidebar placeholder - 20% width */}
      <div className="w-1/5 bg-gray-100 p-4">
        <h2 className="text-lg font-semibold mb-4">Sidebar</h2>
        <p className="text-gray-600 text-sm">This area will be implemented later.</p>
      </div>
    </div>
  );
};

export default CourseCreation;